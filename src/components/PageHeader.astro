---
import { Avatar, Breadcrumbs, BreadcrumbsItem } from 'accessible-astro-components'
import { Image } from 'astro:assets'
import sanitizeHtml from 'sanitize-html'

/**
 * PageHeader Component
 *
 * @description PageHeader description
 */
interface Props {
  /**
   * Additional classes to apply to the PageHeader
   */
  class?: string
  /**
   * The featured image of the page
   */
  featuredImage?: string
  /**
   * The title of the page
   */
  title: string
  /**
   * The subtitle of the page
   * @description Can contain HTML content (will be sanitized)
   */
  subtitle?: string
  /**
   * The background color of the page header
   * @type {'primary' | 'secondary' | 'neutral' | 'gradient' | 'bordered' | undefined}
   * @default undefined - Uses the default background color
   */
  /**
   * The author of the page
   */
  author?: {
    name: string
    image: string
    bio: string
  }
  bgType?: 'primary' | 'secondary' | 'neutral' | 'gradient' | 'bordered'
  /**
   * Whether to show the breadcrumbs
   */
  showBreadcrumbs?: boolean
}

const { class: className, title, subtitle, bgType, showBreadcrumbs = true, featuredImage, author } = Astro.props

// Sanitize subtitle HTML if present
const sanitizedSubtitle: string = subtitle
  ? sanitizeHtml(subtitle, {
      allowedTags: ['b', 'i', 'em', 'strong', 'a', 'span', 'br'],
      allowedAttributes: {
        a: ['href', 'title', 'target', 'rel'],
        span: ['class'],
      },
    })
  : ''
---

<section class:list={[className, 'page-header']}>
  <div class="container my-3">
    {
      showBreadcrumbs &&
        (() => {
          const path = Astro.url.pathname
          const segments = path.split('/').filter(Boolean)

          if (segments.length === 0) {
            return null // No breadcrumbs on homepage
          }

          return (
            <Breadcrumbs>
              <BreadcrumbsItem href="/" label="Home" />
              {segments.map((segment, index) => {
                const url = `/${segments.slice(0, index + 1).join('/')}`
                const isLast = index === segments.length - 1
                const formattedName = segment
                  .split('-')
                  .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
                  .join(' ')

                return <BreadcrumbsItem href={isLast ? undefined : url} label={formattedName} currentPage={isLast} />
              })}
            </Breadcrumbs>
          )
        })()
    }
  </div>
  {
    featuredImage && (
      <div class="featured-image-full-width">
        <button 
          class="image-modal-trigger"
          data-image-src={featuredImage}
          aria-label="Ver imagen en pantalla completa"
        >
          <Image
            src={featuredImage}
            alt=""
            width={1200}
            height={400}
            class="w-full h-[400px] object-cover"
          />
        </button>
      </div>
    )
  }
  <div class:list={['py-16', bgType && `bg-${bgType}`]}>
    <div class="narrow container">
      <h1 class="text-center mb-6">{title}</h1>
      {sanitizedSubtitle && <p class="text-2xl text-center mb-8" set:html={sanitizedSubtitle} />}
      {
        author && (
          <div class="flex justify-center">
            <Avatar title={author.name} img={author.image} subtitle={author.bio} />
          </div>
        )
      }
    </div>
  </div>
</section>

<!-- Image Modal -->
<div id="image-modal" class="image-modal" role="dialog" aria-modal="true" aria-labelledby="modal-title" aria-hidden="true">
  <div class="image-modal-backdrop"></div>
  <div class="image-modal-content">
    <button 
      class="image-modal-close" 
      aria-label="Cerrar imagen"
      title="Cerrar imagen (Escape)"
    >
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M18 6L6 18M6 6L18 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
    </button>
    <img id="modal-image" class="image-modal-image" alt="" />
  </div>
</div>

<style>
  .page-header {
    .bg-primary {
      background-color: light-dark(var(--color-primary-100), var(--color-primary-500));
    }

    .bg-secondary {
      background-color: light-dark(var(--color-secondary-100), var(--color-secondary-500));
    }

    .bg-neutral {
      background-color: light-dark(var(--color-neutral-300), var(--color-neutral-800));
    }

    .bg-gradient {
      background-image: linear-gradient(
        315deg,
        light-dark(var(--color-primary-100), var(--color-secondary-100)) 25%,
        light-dark(var(--color-secondary-100), var(--color-primary-200))
      );
      color: var(--color-neutral-900);
    }

    .bg-bordered {
      border: 1px solid var(--border-color-subtle);
      border-inline: 0;
    }

    .featured-image-container {
      max-height: 500px;
      overflow: hidden;
    }

    .featured-image-full-width {
      width: 100%;
      margin: 0;
      padding: 0;
    }

    .image-modal-trigger {
      background: none;
      border: none;
      padding: 0;
      cursor: pointer;
      border-radius: 0;
      overflow: hidden;
      transition: transform 0.2s ease, box-shadow 0.2s ease;
      width: 100%;
      display: block;

      &:hover {
        transform: scale(1.01);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
      }

      &:focus {
        outline: 2px solid var(--color-primary-500);
        outline-offset: 2px;
      }
    }
  }

  /* Image Modal Styles */
  .image-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1000;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0.3s ease;

    &.active {
      opacity: 1;
      visibility: visible;
    }
  }

  .image-modal-backdrop {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(4px);
  }

  .image-modal-content {
    position: relative;
    max-width: 90vw;
    max-height: 90vh;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .image-modal-close {
    position: absolute;
    top: -50px;
    right: 0;
    background: rgba(255, 255, 255, 0.9);
    border: none;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: background-color 0.2s ease, transform 0.2s ease;
    z-index: 1001;

    &:hover {
      background: rgba(255, 255, 255, 1);
      transform: scale(1.1);
    }

    &:focus {
      outline: 2px solid var(--color-primary-500);
      outline-offset: 2px;
    }

    svg {
      color: #333;
    }
  }

  .image-modal-image {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
    border-radius: 0.5rem;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
  }

  /* Dark mode adjustments */
  @media (prefers-color-scheme: dark) {
    .image-modal-close {
      background: rgba(0, 0, 0, 0.8);
      
      &:hover {
        background: rgba(0, 0, 0, 1);
      }

      svg {
        color: #fff;
      }
    }
  }
</style>

<script>
  document.addEventListener('astro:page-load', () => {
    const modal = document.getElementById('image-modal')
    const modalImage = document.getElementById('modal-image')
    const modalClose = document.querySelector('.image-modal-close')
    const modalBackdrop = document.querySelector('.image-modal-backdrop')
    const imageTriggers = document.querySelectorAll('.image-modal-trigger')

    if (!modal || !modalImage || !modalClose || !modalBackdrop) return

    // Function to open modal
    const openModal = (imageSrc: string) => {
      const img = modalImage as HTMLImageElement
      const closeBtn = modalClose as HTMLButtonElement
      
      img.src = imageSrc
      img.alt = 'Imagen ampliada'
      modal.classList.add('active')
      modal.setAttribute('aria-hidden', 'false')
      document.body.style.overflow = 'hidden' // Prevent background scrolling
      
      // Focus the close button for accessibility
      closeBtn.focus()
    }

    // Function to close modal
    const closeModal = () => {
      modal.classList.remove('active')
      modal.setAttribute('aria-hidden', 'true')
      document.body.style.overflow = '' // Restore scrolling
    }

    // Add click event listeners to image triggers
    imageTriggers.forEach(trigger => {
      trigger.addEventListener('click', (e) => {
        e.preventDefault()
        const imageSrc = trigger.getAttribute('data-image-src')
        if (imageSrc) {
          openModal(imageSrc)
        }
      })
    })

    // Close modal when clicking close button
    modalClose.addEventListener('click', closeModal)

    // Close modal when clicking backdrop
    modalBackdrop.addEventListener('click', closeModal)

    // Close modal with Escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && modal.classList.contains('active')) {
        closeModal()
      }
    })

    // Handle focus trap for accessibility
    const focusableElements = modal.querySelectorAll('button, [tabindex]:not([tabindex="-1"])')
    const firstFocusableElement = focusableElements[0] as HTMLElement
    const lastFocusableElement = focusableElements[focusableElements.length - 1] as HTMLElement

    modal.addEventListener('keydown', (e) => {
      if (e.key === 'Tab') {
        if (e.shiftKey) {
          if (document.activeElement === firstFocusableElement) {
            lastFocusableElement.focus()
            e.preventDefault()
          }
        } else {
          if (document.activeElement === lastFocusableElement) {
            firstFocusableElement.focus()
            e.preventDefault()
          }
        }
      }
    })
  })
</script>
